name: "release-holochain-binaries"
on:
  workflow_call:
    inputs:
      holochain-version:
        required: true
        type: string
      x86_64-pc-windows-msvc:
        required: false
        default: true
        type: boolean
      aarch64-apple-darwin:
        required: false
        default: true
        type: boolean
      x86_64-apple-darwin:
        required: false
        default: true
        type: boolean
      x86_64-unknown-linux-gnu:
        required: false
        default: true
        type: boolean
      aarch64-unknown-linux-gnu:
        required: false
        default: true
        type: boolean
  workflow_dispatch:
    inputs:
      holochain-version:
        required: true
        type: string
      x86_64-pc-windows-msvc:
        required: false
        default: false
        type: boolean
      aarch64-apple-darwin:
        required: false
        default: false
        type: boolean
      x86_64-apple-darwin:
        required: false
        default: false
        type: boolean
      x86_64-unknown-linux-gnu:
        required: false
        default: false
        type: boolean
      aarch64-unknown-linux-gnu:
        required: false
        default: false
        type: boolean

jobs:
  publish-holochain-binaries:
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-2022, macos-latest, macos-13, ubuntu-22.04]
    permissions:
      contents: write
    runs-on: ${{ matrix.platform }}

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      # Checks out a copy of your repository on the ubuntu-latest machine
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: install Rust
        uses: dtolnay/rust-toolchain@1.87.0

      - name: install Go stable
        uses: actions/setup-go@v4
        with:
          go-version: "stable"

      - name: Get patch commit hashes (Windows)
        if: matrix.platform == 'windows-2022'
        id: get_hashes_windows
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $headers = @{ Authorization = "Bearer $env:GITHUB_TOKEN" }

          $wasmerHash = (Invoke-RestMethod -Uri "https://api.github.com/repos/guillemcordoba/wasmer/git/refs/heads/fix-x86" -Headers $headers).object.sha.Substring(0,5)
          echo "wasmer_hash=$wasmerHash" >> $env:GITHUB_OUTPUT

          $kitsune2Hash = (Invoke-RestMethod -Uri "https://api.github.com/repos/guillemcordoba/kitsune2/git/refs/heads/iroh-transport" -Headers $headers).object.sha.Substring(0,5)
          echo "kitsune2_hash=$kitsune2Hash" >> $env:GITHUB_OUTPUT

          echo "Wasmer hash: $wasmerHash"
          echo "Kitsune2 hash: $kitsune2Hash"
        shell: pwsh

      - name: Get patch commit hashes (Unix)
        if: matrix.platform != 'windows-2022'
        id: get_hashes_unix
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          wasmer_hash=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" "https://api.github.com/repos/guillemcordoba/wasmer/git/refs/heads/fix-x86" | jq -r '.object.sha' | cut -c1-5)
          echo "wasmer_hash=$wasmer_hash" >> $GITHUB_OUTPUT

          kitsune2_hash=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" "https://api.github.com/repos/guillemcordoba/kitsune2/git/refs/heads/iroh-transport" | jq -r '.object.sha' | cut -c1-5)
          echo "kitsune2_hash=$kitsune2_hash" >> $GITHUB_OUTPUT

          echo "Wasmer hash: $wasmer_hash"
          echo "Kitsune2 hash: $kitsune2_hash"
        shell: bash

      - name: Set unified hashes
        id: hashes
        run: |
          if [[ "${{ matrix.platform }}" == "windows-2022" ]]; then
            echo "wasmer_hash=${{ steps.get_hashes_windows.outputs.wasmer_hash }}" >> $GITHUB_OUTPUT
            echo "kitsune2_hash=${{ steps.get_hashes_windows.outputs.kitsune2_hash }}" >> $GITHUB_OUTPUT
          else
            echo "wasmer_hash=${{ steps.get_hashes_unix.outputs.wasmer_hash }}" >> $GITHUB_OUTPUT
            echo "kitsune2_hash=${{ steps.get_hashes_unix.outputs.kitsune2_hash }}" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Set version strings
        id: version
        run: |
          echo "full_version=${{ inputs.holochain-version }}-wasmer-${{ steps.hashes.outputs.wasmer_hash }}-kitsune2-${{ steps.hashes.outputs.kitsune2_hash }}" >> $GITHUB_OUTPUT
        shell: bash

      - id: create-release
        if: matrix.platform == 'ubuntu-22.04'
        uses: ncipollo/release-action@v1
        with:
          body: "Holochain binaries for Linux/Windows/macOS with patched wasmer and kitsune2 dependencies."
          prerelease: true
          skipIfReleaseExists: true
          tag: holochain-binaries-${{ steps.version.outputs.full_version }}

      - name: setup binaries (x86_64-pc-windows-msvc)
        if: matrix.platform == 'windows-2022' && inputs.x86_64-pc-windows-msvc == true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create a temporary Cargo.toml with patch dependencies
          New-Item -ItemType Directory -Force -Path temp-holochain-build-windows
          Set-Location temp-holochain-build-windows

          @"
          [package]
          name = "temp-holochain-build"
          version = "0.1.0"
          edition = "2021"

          [dependencies]
          holochain = { version = "${{ inputs.holochain-version }}", default-features = false, features = ["sqlite-encrypted", "wasmer_sys", "backend-go-pion"] }

          [patch.crates-io]
          wasmer-vm = { git = "https://github.com/guillemcordoba/wasmer", branch = "fix-x86" }
          wasmer-types = { git = "https://github.com/guillemcordoba/wasmer", branch = "fix-x86" }
          kitsune2 = { git = "https://github.com/guillemcordoba/kitsune2", branch = "iroh-transport" }
          kitsune2_api = { git = "https://github.com/guillemcordoba/kitsune2", branch = "iroh-transport" }
          kitsune2_core = { git = "https://github.com/guillemcordoba/kitsune2", branch = "iroh-transport" }
          kitsune2_dht = { git = "https://github.com/guillemcordoba/kitsune2", branch = "iroh-transport" }
          kitsune2_gossip = { git = "https://github.com/guillemcordoba/kitsune2", branch = "iroh-transport" }
          kitsune2_bootstrap_client = { git = "https://github.com/guillemcordoba/kitsune2", branch = "iroh-transport" }
          "@ | Out-File -FilePath Cargo.toml -Encoding utf8

          # Install holochain binary with patches applied
          cargo install holochain --version ${{ inputs.holochain-version }} --locked --no-default-features --features sqlite-encrypted,wasmer_sys,backend-go-pion
          $HcPath = Get-Command holochain | Select-Object -ExpandProperty Definition
          Copy-Item $HcPath -Destination ../holochain-v${{ steps.version.outputs.full_version }}-x86_64-pc-windows-msvc.exe
          Set-Location ..

          CertUtil -hashfile "holochain-v${{ steps.version.outputs.full_version }}-x86_64-pc-windows-msvc.exe" SHA256

          gh release upload "holochain-binaries-${{ steps.version.outputs.full_version }}" "holochain-v${{ steps.version.outputs.full_version }}-x86_64-pc-windows-msvc.exe"

      - name: setup binaries (aarch64-apple-darwin)
        if: matrix.platform == 'macos-latest' && inputs.aarch64-apple-darwin == true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          rustup target add aarch64-apple-darwin

          # Create a temporary Cargo.toml with patch dependencies
          mkdir temp-holochain-build-aarch64-darwin
          cd temp-holochain-build-aarch64-darwin

          cat > Cargo.toml << 'EOF'
          [package]
          name = "temp-holochain-build"
          version = "0.1.0"
          edition = "2021"

          [dependencies]
          holochain = { version = "${{ inputs.holochain-version }}", default-features = false, features = ["sqlite-encrypted", "wasmer_sys", "backend-go-pion"] }

          [patch.crates-io]
          wasmer-vm = { git = "https://github.com/guillemcordoba/wasmer", branch = "fix-x86" }
          wasmer-types = { git = "https://github.com/guillemcordoba/wasmer", branch = "fix-x86" }
          kitsune2 = { git = "https://github.com/guillemcordoba/kitsune2", branch = "iroh-transport" }
          kitsune2_api = { git = "https://github.com/guillemcordoba/kitsune2", branch = "iroh-transport" }
          kitsune2_core = { git = "https://github.com/guillemcordoba/kitsune2", branch = "iroh-transport" }
          kitsune2_dht = { git = "https://github.com/guillemcordoba/kitsune2", branch = "iroh-transport" }
          kitsune2_gossip = { git = "https://github.com/guillemcordoba/kitsune2", branch = "iroh-transport" }
          kitsune2_bootstrap_client = { git = "https://github.com/guillemcordoba/kitsune2", branch = "iroh-transport" }
          EOF

          # Install holochain binary with patches applied
          cargo install holochain --version ${{ inputs.holochain-version }} --target aarch64-apple-darwin --locked --no-default-features --features sqlite-encrypted,wasmer_sys,backend-go-pion
          HOLOCHAIN_PATH=$(which holochain)
          cp $HOLOCHAIN_PATH ../holochain-v${{ steps.version.outputs.full_version }}-aarch64-apple-darwin
          cd ..

          shasum -a 256 holochain-v${{ steps.version.outputs.full_version }}-aarch64-apple-darwin

          gh release upload "holochain-binaries-${{ steps.version.outputs.full_version }}" "holochain-v${{ steps.version.outputs.full_version }}-aarch64-apple-darwin"

      - name: setup binaries (x86_64-apple-darwin)
        if: matrix.platform == 'macos-13' && inputs.x86_64-apple-darwin == true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          rustup target add x86_64-apple-darwin

          # Create a temporary Cargo.toml with patch dependencies
          mkdir temp-holochain-build-x86_64-darwin
          cd temp-holochain-build-x86_64-darwin

          cat > Cargo.toml << 'EOF'
          [package]
          name = "temp-holochain-build"
          version = "0.1.0"
          edition = "2021"

          [dependencies]
          holochain = { version = "${{ inputs.holochain-version }}", default-features = false, features = ["sqlite-encrypted", "wasmer_sys", "backend-go-pion"] }

          [patch.crates-io]
          wasmer-vm = { git = "https://github.com/guillemcordoba/wasmer", branch = "fix-x86" }
          wasmer-types = { git = "https://github.com/guillemcordoba/wasmer", branch = "fix-x86" }
          kitsune2 = { git = "https://github.com/guillemcordoba/kitsune2", branch = "iroh-transport" }
          kitsune2_api = { git = "https://github.com/guillemcordoba/kitsune2", branch = "iroh-transport" }
          kitsune2_core = { git = "https://github.com/guillemcordoba/kitsune2", branch = "iroh-transport" }
          kitsune2_dht = { git = "https://github.com/guillemcordoba/kitsune2", branch = "iroh-transport" }
          kitsune2_gossip = { git = "https://github.com/guillemcordoba/kitsune2", branch = "iroh-transport" }
          kitsune2_bootstrap_client = { git = "https://github.com/guillemcordoba/kitsune2", branch = "iroh-transport" }
          EOF

          # Install holochain binary with patches applied
          cargo install holochain --version ${{ inputs.holochain-version }} --target x86_64-apple-darwin --locked --no-default-features --features sqlite-encrypted,wasmer_sys,backend-go-pion
          HOLOCHAIN_PATH=$(which holochain)
          cp $HOLOCHAIN_PATH ../holochain-v${{ steps.version.outputs.full_version }}-x86_64-apple-darwin
          cd ..

          shasum -a 256 holochain-v${{ steps.version.outputs.full_version }}-x86_64-apple-darwin

          gh release upload "holochain-binaries-${{ steps.version.outputs.full_version }}" "holochain-v${{ steps.version.outputs.full_version }}-x86_64-apple-darwin"

      # - name: setup binaries (x86_64-unknown-linux-gnu)
      #   if: matrix.platform == 'ubuntu-22.04' && inputs.x86_64-unknown-linux-gnu == true
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #     # Create a temporary Cargo.toml with patch dependencies
      #     mkdir temp-holochain-build-x86_64
      #     cd temp-holochain-build-x86_64

      #     cat > Cargo.toml << 'EOF'
      #     [package]
      #     name = "temp-holochain-build"
      #     version = "0.1.0"
      #     edition = "2021"

      #     [dependencies]
      #     holochain = { version = "${{ inputs.holochain-version }}", default-features = false, features = ["sqlite-encrypted", "wasmer_sys", "backend-go-pion"] }

      #     [patch.crates-io]
      #     wasmer-vm = { git = "https://github.com/guillemcordoba/wasmer", branch = "fix-x86" }
      #     wasmer-types = { git = "https://github.com/guillemcordoba/wasmer", branch = "fix-x86" }
      #     kitsune2 = { git = "https://github.com/guillemcordoba/kitsune2", branch = "iroh-transport" }
      #     kitsune2_api = { git = "https://github.com/guillemcordoba/kitsune2", branch = "iroh-transport" }
      #     kitsune2_core = { git = "https://github.com/guillemcordoba/kitsune2", branch = "iroh-transport" }
      #     kitsune2_dht = { git = "https://github.com/guillemcordoba/kitsune2", branch = "iroh-transport" }
      #     kitsune2_gossip = { git = "https://github.com/guillemcordoba/kitsune2", branch = "iroh-transport" }
      #     kitsune2_bootstrap_client = { git = "https://github.com/guillemcordoba/kitsune2", branch = "iroh-transport" }
      #     EOF

      #     # Install holochain binary with patches applied
      #     cargo install holochain --version ${{ inputs.holochain-version }} --locked --no-default-features --features sqlite-encrypted,wasmer_sys,backend-go-pion
      #     HOLOCHAIN_PATH=$(which holochain)
      #     cp $HOLOCHAIN_PATH ../holochain-v${{ steps.version.outputs.full_version }}-x86_64-unknown-linux-gnu
      #     cd ..

      #     shasum -a 256 holochain-v${{ steps.version.outputs.full_version }}-x86_64-unknown-linux-gnu

      #     gh release upload "holochain-binaries-${{ steps.version.outputs.full_version }}" "holochain-v${{ steps.version.outputs.full_version }}-x86_64-unknown-linux-gnu"

      - name: setup binaries (aarch64-unknown-linux-gnu)
        if: matrix.platform == 'ubuntu-22.04' && inputs.aarch64-unknown-linux-gnu == true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          rustup target add aarch64-unknown-linux-gnu

          # install gcc compiler for aarch64
          sudo apt update
          sudo apt install gcc-aarch64-linux-gnu
          sudo apt install g++-aarch64-linux-gnu

          # Create a temporary Cargo.toml with patch dependencies
          mkdir temp-holochain-build-aarch64
          cd temp-holochain-build-aarch64

          cat > Cargo.toml << 'EOF'
          [package]
          name = "temp-holochain-build"
          version = "0.1.0"
          edition = "2021"

          [dependencies]
          holochain = { version = "${{ inputs.holochain-version }}", default-features = false, features = ["sqlite-encrypted", "wasmer_sys", "backend-go-pion"] }

          [patch.crates-io]
          wasmer-vm = { git = "https://github.com/guillemcordoba/wasmer", branch = "fix-x86" }
          wasmer-types = { git = "https://github.com/guillemcordoba/wasmer", branch = "fix-x86" }
          kitsune2 = { git = "https://github.com/guillemcordoba/kitsune2", branch = "iroh-transport" }
          kitsune2_api = { git = "https://github.com/guillemcordoba/kitsune2", branch = "iroh-transport" }
          kitsune2_core = { git = "https://github.com/guillemcordoba/kitsune2", branch = "iroh-transport" }
          kitsune2_dht = { git = "https://github.com/guillemcordoba/kitsune2", branch = "iroh-transport" }
          kitsune2_gossip = { git = "https://github.com/guillemcordoba/kitsune2", branch = "iroh-transport" }
          kitsune2_bootstrap_client = { git = "https://github.com/guillemcordoba/kitsune2", branch = "iroh-transport" }
          EOF

          # Install holochain binary with patches applied (try simple approach first)
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc cargo install holochain --version ${{ inputs.holochain-version }} --target aarch64-unknown-linux-gnu --locked --no-default-features --features sqlite-encrypted,wasmer_sys,backend-go-pion
          HOLOCHAIN_PATH=$(which holochain)
          cp $HOLOCHAIN_PATH ../holochain-v${{ steps.version.outputs.full_version }}-aarch64-unknown-linux-gnu
          cd ..

          shasum -a 256 holochain-v${{ steps.version.outputs.full_version }}-aarch64-unknown-linux-gnu

          gh release upload "holochain-binaries-${{ steps.version.outputs.full_version }}" "holochain-v${{ steps.version.outputs.full_version }}-aarch64-unknown-linux-gnu"
